import{_ as a,o as s,c as n,a2 as l}from"./chunks/framework.DkMK-_fX.js";const m=JSON.parse('{"title":"玩转CSS","description":"","frontmatter":{},"headers":[],"relativePath":"大前端/Css/玩转CSS.md","filePath":"大前端/Css/玩转CSS.md","lastUpdated":1728700067000}'),i={name:"大前端/Css/玩转CSS.md"},e=l(`<h1 id="玩转css" tabindex="-1">玩转CSS <a class="header-anchor" href="#玩转css" aria-label="Permalink to &quot;玩转CSS&quot;">​</a></h1><h2 id="_1-浏览器" tabindex="-1">1 浏览器 <a class="header-anchor" href="#_1-浏览器" aria-label="Permalink to &quot;1 浏览器&quot;">​</a></h2><p>前端开发者每天都打交道的工具，浏览器是一切CSS的运行环境; 同时标志着互联网的时代来临。</p><h3 id="_1-1-历史" tabindex="-1">1.1 历史 <a class="header-anchor" href="#_1-1-历史" aria-label="Permalink to &quot;1.1 历史&quot;">​</a></h3><ul><li>1993年，NCSA组织发布了Mosaic浏览器</li><li>1994年，网景公司发布了Navigator浏览器</li><li>1995年，微软公司发布了IExplorer浏览器，并掀起了浏览器之战</li><li>1996年，Navigator浏览器的市场份额达到86%，微软公司开始将IExplorer浏览器整合到Windows操作系统中</li><li>1996年，ASA公司发布了Opera浏览器</li><li>1998年，网景公司启动其开源产品，开始推出Mozilla</li><li>2001年，为人诟病的IExplorer 6发布，这货霸占国内市场十多年</li><li>2002年，网景公司发布了Firefox浏览器</li><li>2003年，苹果公司发布了Safari浏览器</li><li>2004年，IExplorer浏览器的市场份额达到了历史顶峰92%，自此以后其市场份额开始下滑</li><li>2006年，Firefox 3的发布创下了吉尼斯世界纪录，一天800万下载量</li><li>2008年，谷歌公司发布了Chrome浏览器</li></ul><blockquote><p>世界五大浏览器：Chrome、Safari、Firefox、Opera、IExplorer/Edge</p></blockquote><h3 id="_1-2-渲染引擎" tabindex="-1">1.2 渲染引擎 <a class="header-anchor" href="#_1-2-渲染引擎" aria-label="Permalink to &quot;1.2 渲染引擎&quot;">​</a></h3><p>渲染引擎又名浏览器内核，指负责对网页语法解析并渲染成一张可视化页面的解析器。</p><ul><li>Google Chrome：Webkit(前期)、Blink(后期)</li><li>Apple Safari：Webkit</li><li>Mozilla Firefox：Gecko</li><li>ASA Opera：Presto(前期)、Blink(后期)</li><li>Microsoft IExplorer：Trident</li><li>Microsoft Edge：Trident(前期)、Blink(后期)</li></ul><h3 id="_1-3-渲染过程" tabindex="-1">1.3 渲染过程 <a class="header-anchor" href="#_1-3-渲染过程" aria-label="Permalink to &quot;1.3 渲染过程&quot;">​</a></h3><p>解析文件 -&gt; 绘制图层 -&gt; 合成图层</p><h4 id="_1-3-1-解析文件" tabindex="-1">1.3.1 解析文件 <a class="header-anchor" href="#_1-3-1-解析文件" aria-label="Permalink to &quot;1.3.1 解析文件&quot;">​</a></h4><ol><li>将html文件转换为DOM树</li><li>将css文件转换为CSSOM树</li><li>将DOM树和CSSOM树合并生成渲染树</li></ol><h4 id="_1-3-2-绘制图层" tabindex="-1">1.3.2 绘制图层 <a class="header-anchor" href="#_1-3-2-绘制图层" aria-label="Permalink to &quot;1.3.2 绘制图层&quot;">​</a></h4><ul><li>根据渲染树生成布局渲染树(回流)</li><li>根据布局渲染树生成绘制渲染树(重绘)</li></ul><h4 id="_1-3-3-合成图层" tabindex="-1">1.3.3 合成图层 <a class="header-anchor" href="#_1-3-3-合成图层" aria-label="Permalink to &quot;1.3.3 合成图层&quot;">​</a></h4><p>根据绘制渲染树合成图层显示在屏幕上</p><h3 id="_1-4-回流重绘" tabindex="-1">1.4 回流重绘 <a class="header-anchor" href="#_1-4-回流重绘" aria-label="Permalink to &quot;1.4 回流重绘&quot;">​</a></h3><h4 id="_1-4-1-回流" tabindex="-1">1.4.1 回流 <a class="header-anchor" href="#_1-4-1-回流" aria-label="Permalink to &quot;1.4.1 回流&quot;">​</a></h4><p>回流又名重排，指几何属性需改变的渲染。</p><p>几何属性：包括布局、尺寸等可用数学几何衡量的属性 布局：display、float、position、list、table、flex、columns、grid 尺寸：margin、padding、border、width、height</p><h4 id="_1-4-2-重绘" tabindex="-1">1.4.2 重绘 <a class="header-anchor" href="#_1-4-2-重绘" aria-label="Permalink to &quot;1.4.2 重绘&quot;">​</a></h4><p>重绘指更改外观属性而不影响几何属性的渲染。</p><p>外观属性：包括界面、文字等可用状态向量描述的属性 界面：appearance、outline、background、mask、box-shadow、box-reflect、filter、opacity、clip 文字：text、font、word</p><blockquote><p>回流必定引发重绘，重绘不一定引发回流</p></blockquote><h4 id="_1-4-3-性能优化" tabindex="-1">1.4.3 性能优化 <a class="header-anchor" href="#_1-4-3-性能优化" aria-label="Permalink to &quot;1.4.3 性能优化&quot;">​</a></h4><ul><li>使用visibility:hidden替换display:none</li><li>使用transform代替top（间接启动GPU加速）</li><li>避免使用Table布局</li><li>避免规则层级过多</li><li>避免节点属性值放在循环里当成循环变量</li><li>动态改变类而不改变样式</li><li>将频繁回流重绘的节点设置为图层</li><li>使用requestAnimationFrame作为动画帧</li></ul><h2 id="_2-选择器" tabindex="-1">2 选择器 <a class="header-anchor" href="#_2-选择器" aria-label="Permalink to &quot;2 选择器&quot;">​</a></h2><p>css选择器又被称为css样式属性、css属性选择器，你了解、使用了哪些选择器？</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>h1 {</span></span>
<span class="line"><span>  ···</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.class {</span></span>
<span class="line"><span>  ···</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#id {</span></span>
<span class="line"><span>  ···</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-1-分类" tabindex="-1">2.1 分类 <a class="header-anchor" href="#_2-1-分类" aria-label="Permalink to &quot;2.1 分类&quot;">​</a></h3><p>tag、#id、.class、元素、*、后代、子代、兄弟、条件、状态、结构、属性、伪元素</p><h4 id="_2-1-1-基础选择器" tabindex="-1">2.1.1 基础选择器 <a class="header-anchor" href="#_2-1-1-基础选择器" aria-label="Permalink to &quot;2.1.1 基础选择器&quot;">​</a></h4><table tabindex="0"><thead><tr><th>选择器</th><th>别名</th><th>说明</th></tr></thead><tbody><tr><td>tag</td><td>标签选择器</td><td>指定类型的标签</td></tr><tr><td>#id</td><td>ID选择器</td><td>指定身份的标签</td></tr><tr><td>.class</td><td>类选择器</td><td>指定类名的标签</td></tr><tr><td>*</td><td>通配选择器</td><td>所有类型的标签</td></tr></tbody></table><h4 id="_2-1-2-集合选择器" tabindex="-1">2.1.2 集合选择器 <a class="header-anchor" href="#_2-1-2-集合选择器" aria-label="Permalink to &quot;2.1.2 集合选择器&quot;">​</a></h4><table tabindex="0"><thead><tr><th>选择器</th><th>别名</th><th>说明</th></tr></thead><tbody><tr><td>elem1,elem2</td><td>并集选择器</td><td>多个指定的元素</td></tr><tr><td>elem.class</td><td>交集选择器</td><td>多个指定的元素</td></tr></tbody></table><h4 id="_2-1-3-条件选择器" tabindex="-1">2.1.3 条件选择器 <a class="header-anchor" href="#_2-1-3-条件选择器" aria-label="Permalink to &quot;2.1.3 条件选择器&quot;">​</a></h4><ul><li>:lang 指定标记语言的元素</li><li>:dir() 指定编写方向的元素</li><li>:has 包含指定元素的元素</li><li>:is 指定条件的元素</li><li>:not 非指定条件的元素</li><li>:where 指定条件的元素</li><li>:scope 指定元素作为参考点</li><li>:any-link 所有包含href的链接元素</li><li>:local-link 所有包含href且属于绝对地址的链接元素</li></ul><h4 id="_2-1-4-状态选择器" tabindex="-1">2.1.4 状态选择器 <a class="header-anchor" href="#_2-1-4-状态选择器" aria-label="Permalink to &quot;2.1.4 状态选择器&quot;">​</a></h4><ul><li>:active 鼠标激活的元素</li><li>:hover 鼠标悬浮的元素</li><li>:link 未访问的链接元素</li><li>:visited 已访问的链接元素</li><li>:target 当前锚点的元素</li><li>:focus 输入聚焦的表单元素</li><li>:required 输入必填的表单元素</li><li>:valid 输入合法的表单元素</li><li>:invalid 输入非法的表单元素</li><li>:in-range 输入范围以内的表单元素</li><li>:out-of-range 输入范围以外的表单元素</li><li>:checked 选项选中的表单元素</li><li>:optional 选项可选的表单元素</li><li>:enabled 事件启用的表单元素</li><li>:disabled 事件禁用的表单元素</li><li>:read-only 只读的表单元素</li><li>:read-write 可读可写的表单元素</li><li>:target-within 内部锚点元素处于激活状态的元素</li><li>:focus-within 内部表单元素处于聚焦状态的元素</li><li>:focus-visible 输入聚焦的表单元素</li><li>:blank 输入为空的表单元素</li><li>:user-invalid 输入合法的表单元素</li><li>:indeterminate 选项未定的表单元素</li><li>:placeholder-shown 占位显示的表单元素</li><li>:current() 浏览中的元素</li><li>:past() 已浏览的元素</li><li>:future() 未浏览的元素</li><li>:playing 开始播放的媒体元素</li><li>:paused 暂停播放的媒体元素</li></ul><h4 id="_2-1-5-结构选择器" tabindex="-1">2.1.5 结构选择器 <a class="header-anchor" href="#_2-1-5-结构选择器" aria-label="Permalink to &quot;2.1.5 结构选择器&quot;">​</a></h4><ul><li>:root 文档的根元素</li><li>:empty 无子元素的元素</li><li>:nth-child(n) 元素中指定顺序索引的元素</li><li>:nth-last-child(n) 元素中指定逆序索引的元素</li><li>:first-child 元素中为首的元素</li><li>:last-child 元素中为尾的元素</li><li>:only-child 父元素仅有该元素的元素</li><li>:nth-of-type(n) 标签中指定顺序索引的标签</li><li>:nth-last-of-type(n) 标签中指定逆序索引的标签</li><li>:first-of-type 标签中为首的标签</li><li>:last-of-type 标签中为尾的标签</li><li>:only-of-type 父元素仅有该标签的标签</li></ul><h4 id="_2-1-6-属性选择器" tabindex="-1">2.1.6 属性选择器 <a class="header-anchor" href="#_2-1-6-属性选择器" aria-label="Permalink to &quot;2.1.6 属性选择器&quot;">​</a></h4><ul><li>[attr] 指定属性的元素</li><li>[attr=val] 属性等于指定值的元素</li><li>[attr*=val] 属性包含指定值的元素</li><li>[attr^=val] 属性以指定值开头的元素</li><li>[attr$=val] 属性以指定值结尾的元素</li><li>[attr~=val] 属性包含指定值(完整单词)的元素(不推荐使用)</li><li>[attr|=val] 属性以指定值(完整单词)开头的元素(不推荐使用)</li></ul><h4 id="_2-1-7-伪元素选择器" tabindex="-1">2.1.7 伪元素选择器 <a class="header-anchor" href="#_2-1-7-伪元素选择器" aria-label="Permalink to &quot;2.1.7 伪元素选择器&quot;">​</a></h4><ul><li>::before 在元素前插入的内容</li><li>::after 在元素后插入的内容</li><li>::first-letter 元素的首字母</li><li>::first-line 元素的首行</li><li>::selection 鼠标选中的元素</li><li>::backdrop 全屏模式的元素</li><li>::placeholder 表单元素的占位</li></ul><h3 id="_2-2-css权重" tabindex="-1">2.2 CSS权重 <a class="header-anchor" href="#_2-2-css权重" aria-label="Permalink to &quot;2.2 CSS权重&quot;">​</a></h3><p>大家开发中遇到过CSS覆盖导致排版出问题？</p><p>样式覆盖的根本原因是未处理好规则间的优先级别，虽然使用!important能解决问题，但不能什么情况都由!important暴力解决。</p><h4 id="_2-2-1-直观权重" tabindex="-1">2.2.1 直观权重 <a class="header-anchor" href="#_2-2-1-直观权重" aria-label="Permalink to &quot;2.2.1 直观权重&quot;">​</a></h4><ul><li>10000：!important</li><li>1000：内联样式、外联样式</li><li>100：ID选择器</li><li>10：类选择器、伪类选择器、属性选择器</li><li>1：标签选择器、伪元素选择器</li><li>0：通配选择器、后代选择器、兄弟选择器</li></ul><h4 id="_2-2-2-微观权重" tabindex="-1">2.2.2 微观权重 <a class="header-anchor" href="#_2-2-2-微观权重" aria-label="Permalink to &quot;2.2.2 微观权重&quot;">​</a></h4><ul><li>1,0,0,0,0：!important</li><li>0,1,0,0,0：内联样式、外联样式</li><li>0,0,1,0,0：ID选择器</li><li>0,0,0,1,0：类选择器、伪类选择器、属性选择器</li><li>0,0,0,0,1：标签选择器、伪元素选择器</li><li>0,0,0,0,0：通配选择器、后代选择器、兄弟选择器</li></ul><h4 id="_2-2-3-规则" tabindex="-1">2.2.3 规则 <a class="header-anchor" href="#_2-2-3-规则" aria-label="Permalink to &quot;2.2.3 规则&quot;">​</a></h4><p>!important &gt; 内联样式 = 外联样式 &gt; ID选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器 &gt; 通配选择器 = 后代选择器 = 兄弟选择器</p><ul><li>规则的权值不同时，权值高的规则优先</li><li>规则的权值相同时，后定义的规则优先</li><li>属性后面追加!important时，规则无条件绝对优先</li></ul><h3 id="_2-3-拓展-css三大特性-继承性、层叠性、优先级-权重" tabindex="-1">2.3 拓展：CSS三大特性（继承性、层叠性、优先级（权重）） <a class="header-anchor" href="#_2-3-拓展-css三大特性-继承性、层叠性、优先级-权重" aria-label="Permalink to &quot;2.3 拓展：CSS三大特性（继承性、层叠性、优先级（权重））&quot;">​</a></h3><h4 id="_2-3-1-继承性" tabindex="-1">2.3.1 继承性 <a class="header-anchor" href="#_2-3-1-继承性" aria-label="Permalink to &quot;2.3.1 继承性&quot;">​</a></h4><p>CSS的继承性，指的是子元素继承父元素的某些样式属性。</p><ul><li>文本相关属性：font-size（字体大小）、font-family（字体系列）、font-style（字体样式）、font-weight（字体粗细）、font、line-height（行高）、text-align（水平对齐方式）、text-indent（首行缩进）、word-spacing（字间距）。</li><li>列表相关属性：list-style-image（使用图像替换列表项标记）、list-style-position（规定列表项标记位置）、list-style-type（设置列表项标记类型）、list-style</li><li>颜色相关属性：color</li></ul><h4 id="_2-3-2-层叠性" tabindex="-1">2.3.2 层叠性 <a class="header-anchor" href="#_2-3-2-层叠性" aria-label="Permalink to &quot;2.3.2 层叠性&quot;">​</a></h4><p>当我们在CSS上重复定义多个相同的属性时，CSS会把先定义时属性覆盖掉（相同的权重），反之权重大的覆盖小的。</p><h2 id="_3-盒模型" tabindex="-1">3 盒模型 <a class="header-anchor" href="#_3-盒模型" aria-label="Permalink to &quot;3 盒模型&quot;">​</a></h2><p>盒模型是CSS中最重要最核心的概念，不要看着基础，往往出错的就是基础部分。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/bcbc60147a070f3971aad73bfa9c38b2.png" alt="盒模型"></p><h3 id="_3-1-组成" tabindex="-1">3.1 组成 <a class="header-anchor" href="#_3-1-组成" aria-label="Permalink to &quot;3.1 组成&quot;">​</a></h3><p>由外到内用公式表示就是：box = margin + border + padding + content</p><p>除了content，其余属性都包含left、right、top和bottom等扩展属性</p><h3 id="_3-2-类型" tabindex="-1">3.2 类型 <a class="header-anchor" href="#_3-2-类型" aria-label="Permalink to &quot;3.2 类型&quot;">​</a></h3><p>因为历史原因，盒模型分为标准盒模型和怪异盒模型</p><h4 id="_3-2-1-标准盒模型" tabindex="-1">3.2.1 标准盒模型 <a class="header-anchor" href="#_3-2-1-标准盒模型" aria-label="Permalink to &quot;3.2.1 标准盒模型&quot;">​</a></h4><p>width = width</p><h4 id="_3-2-2-怪异盒模型" tabindex="-1">3.2.2 怪异盒模型 <a class="header-anchor" href="#_3-2-2-怪异盒模型" aria-label="Permalink to &quot;3.2.2 怪异盒模型&quot;">​</a></h4><p>width = border + padding + width</p><h4 id="_3-2-3-转换" tabindex="-1">3.2.3 转换 <a class="header-anchor" href="#_3-2-3-转换" aria-label="Permalink to &quot;3.2.3 转换&quot;">​</a></h4><p>css3声明盒模型的类型，它就是box-sizing。</p><ul><li>content-box：标准盒模型(默认)</li><li>border-box：怪异盒模型</li></ul><h3 id="_3-3-拓展-行内元素、块级元素" tabindex="-1">3.3 拓展： 行内元素、块级元素 <a class="header-anchor" href="#_3-3-拓展-行内元素、块级元素" aria-label="Permalink to &quot;3.3 拓展： 行内元素、块级元素&quot;">​</a></h3><p>默认排版从左到右，从上到下</p><p>当节点的display声明为block、list-item、table、flex或grid时，该节点被标记为块级元素。</p><p>当节点的display声明为inline、inline-block、inline-table、inline-flex或inline-grid时，该节点被标记为行内元素。</p><h3 id="_3-4-拓展-css定位" tabindex="-1">3.4 拓展：css定位 <a class="header-anchor" href="#_3-4-拓展-css定位" aria-label="Permalink to &quot;3.4 拓展：css定位&quot;">​</a></h3><p>CSS 有两个最重要的基本属性，前端开发必须掌握：display 和 position</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html" target="_blank" rel="noreferrer">CSS 定位详解</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2018/12/css-position-sticky/" target="_blank" rel="noreferrer">杀了个回马枪，还是说说position:sticky吧</a></li></ul><h2 id="_4-布局方式" tabindex="-1">4 布局方式 <a class="header-anchor" href="#_4-布局方式" aria-label="Permalink to &quot;4 布局方式&quot;">​</a></h2><ul><li>普通布局：display:block/inline</li><li>浮动布局：float:left/right <ul><li>文字环绕 <img src="https://inews.gtimg.com/newsapp_ls/0/15001646453/0" alt="image.png"></li></ul></li><li>定位布局：position:relative/absolute/fixed、left/right/top/bottom/z-index</li><li>表格布局：table系列属性</li><li>弹性布局：display:flex/inline-flex、flex系列属性</li><li>多列布局：column系列属性</li><li>格栅布局：display:grid/inline-grid、grid系列属性</li><li>响应式布局：em/rem/vw/vh/vmin/vmax、媒体查询 <ul><li>拓展1：<a href="https://www.cnblogs.com/theblogs/p/10516098.html" target="_blank" rel="noreferrer">CSS单位px，rem，em，vw，vh的区别</a></li><li>拓展2：<a href="https://juejin.cn/post/6844903671143088136" target="_blank" rel="noreferrer">rem布局解析</a></li><li>拓展3：<a href="https://www.jianshu.com/p/1a9b5d48afa2" target="_blank" rel="noreferrer">谈谈 rem 与 vw -- rem</a></li></ul></li></ul><h2 id="_5-flex" tabindex="-1">5 Flex <a class="header-anchor" href="#_5-flex" aria-label="Permalink to &quot;5 Flex&quot;">​</a></h2><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">Flex布局教程：语法篇</a><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noreferrer">Flex布局教程：实例篇</a><a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noreferrer">30 分钟学会 Flex 布局</a><a href="https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/" target="_blank" rel="noreferrer">写给自己看的display: flex布局教程</a></p><h3 id="_5-1-容器和项目" tabindex="-1">5.1 容器和项目 <a class="header-anchor" href="#_5-1-容器和项目" aria-label="Permalink to &quot;5.1 容器和项目&quot;">​</a></h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。</p><h3 id="_5-2-容器的属性" tabindex="-1">5.2 容器的属性 <a class="header-anchor" href="#_5-2-容器的属性" aria-label="Permalink to &quot;5.2 容器的属性&quot;">​</a></h3><ul><li>flex-direction 决定主轴的方向</li><li>flex-wrap 定义如何换行</li><li>flex-flow 以上两个的缩写</li><li>justify-content 项目在主轴上的对齐方式</li><li>align-items 项目在交叉轴上如何对齐</li><li>align-content 多根轴线的对齐方式</li></ul><h3 id="_5-3-项目的属性" tabindex="-1">5.3 项目的属性 <a class="header-anchor" href="#_5-3-项目的属性" aria-label="Permalink to &quot;5.3 项目的属性&quot;">​</a></h3><ul><li>order 定义项目的排列顺序。数值越小，排列越靠前，默认为0</li><li>flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li>flex-basis 定义了在分配多余空间之前，项目占据的主轴空间</li><li>flex 上三属性的缩写 默认0 1 auto</li><li>align-self 允许单个项目有与其他项目不一样的对齐方式</li></ul><h2 id="_6-grid" tabindex="-1">6 Grid <a class="header-anchor" href="#_6-grid" aria-label="Permalink to &quot;6 Grid&quot;">​</a></h2><p>网格布局（Grid）是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。</p><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">推荐阮一峰Grid网格布局教程</a></p><h2 id="_7-转换-变形-、过渡和动画" tabindex="-1">7 转换（变形）、过渡和动画 <a class="header-anchor" href="#_7-转换-变形-、过渡和动画" aria-label="Permalink to &quot;7 转换（变形）、过渡和动画&quot;">​</a></h2><h3 id="_7-1-转换-transform" tabindex="-1">7.1 转换 transform <a class="header-anchor" href="#_7-1-转换-transform" aria-label="Permalink to &quot;7.1 转换 transform&quot;">​</a></h3><p>对元素进行移动、缩放、转动、拉长或拉伸</p><h3 id="_7-1-1-语法" tabindex="-1">7.1.1 语法 <a class="header-anchor" href="#_7-1-1-语法" aria-label="Permalink to &quot;7.1.1 语法&quot;">​</a></h3><ul><li>translate()：位移 <img src="https://pic.rmb.bdstatic.com/bjh/90d0549fd0de7978f469c9980b946b8a.png" alt="translate()：位移"></li><li>scale()：缩放 <img src="https://pic.rmb.bdstatic.com/bjh/3764b6b057e146c2521d132d11b22e2c.png" alt="scale()：缩放"></li><li>skew()：扭曲 <img src="https://pic.rmb.bdstatic.com/bjh/5d1ae4c46034a8179b9bbee3771a5416.png" alt="skew()：扭曲"></li><li>rotate()：旋转 <img src="https://pic.rmb.bdstatic.com/bjh/18dca3e350eb8111d1ea198533528a6d.png" alt="rotate()：旋转"></li></ul><h3 id="_7-1-2-案例-transform画心形" tabindex="-1">7.1.2 案例：transform画心形 <a class="header-anchor" href="#_7-1-2-案例-transform画心形" aria-label="Permalink to &quot;7.1.2 案例：transform画心形&quot;">​</a></h3><p>在线演示：<a href="https://codepen.io/luofatso/pen/xxYjExY" target="_blank" rel="noreferrer">transform画心形</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;heart-shape&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.heart-shape {</span></span>
<span class="line"><span>  position: relative;</span></span>
<span class="line"><span>  width: 200px;</span></span>
<span class="line"><span>  height: 200px;</span></span>
<span class="line"><span>  background-color: #f66;</span></span>
<span class="line"><span>  transform: rotate(45deg);</span></span>
<span class="line"><span>  &amp;::before,</span></span>
<span class="line"><span>  &amp;::after {</span></span>
<span class="line"><span>    position: absolute;</span></span>
<span class="line"><span>    left: 0;</span></span>
<span class="line"><span>    top: 0;</span></span>
<span class="line"><span>    border-radius: 100%;</span></span>
<span class="line"><span>    width: 100%;</span></span>
<span class="line"><span>    height: 100%;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    content: &quot;&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  &amp;::before {</span></span>
<span class="line"><span>    transform: translateX(-50%);</span></span>
<span class="line"><span>    // background-color: #fee;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  &amp;::after {</span></span>
<span class="line"><span>    transform: translateY(-50%);</span></span>
<span class="line"><span>    // background-color: #999;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>效果图：</p><table tabindex="0"><thead><tr><th><img src="https://pic.rmb.bdstatic.com/bjh/eb74655b784e8c626b9b5ae1ba6c899d.png" alt="transform画心形"></th><th><img src="https://pic.rmb.bdstatic.com/bjh/3815be56f884b901ee0b7ad60f154de9.png" alt="transform画心形"></th></tr></thead></table><h3 id="_7-2-过渡-transition" tabindex="-1">7.2 过渡 transition <a class="header-anchor" href="#_7-2-过渡-transition" aria-label="Permalink to &quot;7.2 过渡 transition&quot;">​</a></h3><p>transition能让状态间的切换变得更丝滑</p><ul><li>transition-property：属性 <ul><li>all：全部属性过渡(默认)</li><li>none：无属性过渡</li><li>String：某个属性过渡</li></ul></li><li>transition-duration：时间 <ul><li>Time：秒或毫秒(默认0)</li></ul></li><li>transition-timing-function：缓动函数 <ul><li>ease：逐渐变慢，等同于cubic-bezier(.25,.1,.25,1)(默认)</li><li>linear：匀速，等同于cubic-bezier(0,0,1,1)</li><li>ease-in：加速，等同于cubic-bezier(.42,0,1,1)</li><li>ease-out：减速，等同于cubic-bezier(0,0,.58,1)</li><li>ease-in-out：先加速后减速，等同于cubic-bezier(.42,0,.58,1)</li><li>cubic-bezier：贝塞尔曲线，(x1,y1,x2,y2)四个值指定于曲线上的点P1和P2，所有值需在[0,1]区域内</li></ul></li><li>transition-delay：时延 <ul><li>Time：秒或毫秒(默认0)</li></ul></li></ul><h3 id="_7-3-动画-animation" tabindex="-1">7.3 动画 animation <a class="header-anchor" href="#_7-3-动画-animation" aria-label="Permalink to &quot;7.3 动画 animation&quot;">​</a></h3><h3 id="_7-3-1-语法" tabindex="-1">7.3.1 语法 <a class="header-anchor" href="#_7-3-1-语法" aria-label="Permalink to &quot;7.3.1 语法&quot;">​</a></h3><ul><li>animation-name：名称 <ul><li>none：无动画(默认)</li><li>String：动画名称</li></ul></li><li>animation-duration：时间 <ul><li>Time：秒或毫秒(默认0)</li></ul></li><li>animation-timing-function：缓动函数 <ul><li>ease：逐渐变慢，等同于cubic-bezier(.25,.1,.25,1)(默认)</li><li>linear：匀速，等同于cubic-bezier(0,0,1,1)</li><li>ease-in：加速，等同于cubic-bezier(.42,0,1,1)</li><li>ease-out：减速，等同于cubic-bezier(0,0,.58,1)</li><li>ease-in-out：先加速后减速，等同于cubic-bezier(.42,0,.58,1)</li><li>cubic-bezier：贝塞尔曲线，(x1,y1,x2,y2)四个值指定于曲线上的点P1和P2，所有值需在[0,1]区域内</li><li>steps([,[start|end]]?)：把动画平均划分成n等分，直到平均走完该动画</li><li>step-start：等同于steps(1,start)，把动画分成一步，动画执行时以左侧端点0%为开始</li><li>step-end：等同于steps(1,end)，把动画分成一步，动画执行时以右侧端点100%为开始</li></ul></li><li>animation-delay：时延 <ul><li>Time：秒或毫秒(默认0)</li></ul></li><li>animation-iteration-count：播放次数 <ul><li>Number：数值(默认1)</li><li>infinite：无限次</li></ul></li><li>animation-direction：轮流反向播放(播放次数为一次则该属性无效果) <ul><li>normal：正常播放(默认)</li><li>alternate：轮流反向播放，奇数次数正常播放，偶数次数反向播放</li></ul></li><li>animation-play-state：播放状态 <ul><li>running：正在播放(默认)</li><li>paused：暂停播放</li></ul></li><li>animation-fill-mode：播放前后其效果是否可见 <ul><li>none：不改变默认行为(默认)</li><li>backwards：在时延所指定时间内或在动画开始前应用开始属性(在第一个关键帧中定义)</li><li>forwards：在动画结束后保持最后一个属性(在最后一个关键帧中定义)</li><li>both：向前和向后填充模式都被应用</li></ul></li></ul><h3 id="_7-3-2-案例-自动打字器" tabindex="-1">7.3.2 案例：自动打字器 <a class="header-anchor" href="#_7-3-2-案例-自动打字器" aria-label="Permalink to &quot;7.3.2 案例：自动打字器&quot;">​</a></h3><p>在线演示：<a href="https://codepen.io/luofatso/pen/poaVbjX" target="_blank" rel="noreferrer">自动打字器</a></p><p>特点：</p><ul><li>字体都是等宽字体，等宽字体可保证每次打字时光标的移动距离都是一致的</li><li>打字器的宽度由最初的0px逐渐增加内容后变成最终固定字数的宽度，宽度以等宽字体的个数为准</li><li>标随着每打一个字就闪烁一次，打字速度均匀，打字完毕再次重复打字</li><li>整个打字过程存在两个动画，一个是打字器自增宽度，一个是光标闪烁</li><li>整个打字过程一闪一闪地完成，根据其断断续续的特点可判断该动画为逐帧动画</li></ul><blockquote><p>有一个叫做ch的长度单位，它是一个等宽字体的特有长度单位，准确宽度为0的宽度。因此一个等宽字体就是1ch，两个等宽字体就是2ch。通过等宽字体个数定制打字器长度最合适不过了，而常用的设备自带等宽字体有Consolas、Monaco和Monospace三种。</p></blockquote><h2 id="_8-函数" tabindex="-1">8 函数 <a class="header-anchor" href="#_8-函数" aria-label="Permalink to &quot;8 函数&quot;">​</a></h2><p>CSS函数指复杂类型或调用特殊处理的组件值类型。为单调的属性声明增加了更强大的点缀，让简单的CSS变得更有艺术感。</p><h3 id="_8-1-分类" tabindex="-1">8.1 分类 <a class="header-anchor" href="#_8-1-分类" aria-label="Permalink to &quot;8.1 分类&quot;">​</a></h3><ul><li>属性函数：attr()；</li><li>背景图片函数：linear-gradient()、radial-gradient()、conic-gradient()、repeating-linear-gradient()、repeating-radial-gradient()、repeating-conic-gradient()、image-set()、image()、url()、element()；</li><li>颜色函数：rgb()、rgba()、hsl()、hsla()、hwb()、color-mod()；</li><li>图形函数：circle()、ellipse()、inset()、polygon()、path()</li><li>滤镜函数：blur()、brightness()、contrast()、drop-shadow()、grayscale()、hue-rotate()、invert()、opacity()、saturate()、sepia()；</li><li>转换函数：matrix()、matrix3d()、perspective()、rotate()、rotate3d()、rotateX()、rotateY()、rotateZ()、scale()、scale3d()、scaleX()、scaleY()、scaleZ()、skew()、skewX()、skewY()、translate()、translateX()、translateY()、translateZ()、translate3d()；</li><li>数学函数：calc()、min()、max()、mixmax()、repeat()；</li><li>缓动函数：cubic-bezier()、steps()；</li><li>其他函数：counter()、counters()、toggle()、var()、 symbols()</li></ul><h2 id="_9-变量" tabindex="-1">9 变量 <a class="header-anchor" href="#_9-变量" aria-label="Permalink to &quot;9 变量&quot;">​</a></h2><p>CSS变量又名CSS自定义属性，指可在整个文档中重复使用的值。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 不使用变量 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用变量 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 全局声明</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --bg-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 局部什么</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--bg-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--bg-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_9-1-使用" tabindex="-1">9.1 使用 <a class="header-anchor" href="#_9-1-使用" aria-label="Permalink to &quot;9.1 使用&quot;">​</a></h3><ul><li><p>声明：--变量名</p></li><li><p>读取：var(--变量名, 默认值)</p></li><li><p>类型</p><ul><li>普通：只能用作属性值不能用作属性名</li><li>字符：与字符串拼接 &quot;Hello, &quot;var(--name)</li><li>数值：使用calc()与数值单位连用 var(--width) * 10px</li></ul></li><li><p>作用域</p><ul><li>范围：在当前节点块作用域及其子节点块作用域下有效</li><li>优先级别：内联样式 = 外联样式 &gt; ID选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器 &gt; 通配选择器 = 后代选择器 = 兄弟选择器</li></ul><blockquote><p>当浏览器遇到无效的 var() 时，会使用继承值或初始值代替。</p></blockquote></li></ul><h3 id="_9-2-好处" tabindex="-1">9.2 好处 <a class="header-anchor" href="#_9-2-好处" aria-label="Permalink to &quot;9.2 好处&quot;">​</a></h3><ul><li><p>减少样式代码的重复性</p></li><li><p>增加样式代码的扩展性</p></li><li><p>提高样式代码的灵活性</p></li><li><p>增多一种CSS与JS的通讯方式</p></li><li><p>不用深层遍历DOM改变某个样式</p></li><li><p>js访问</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 定义</span></span>
<span class="line"><span>:root {</span></span>
<span class="line"><span>  --main-color: &#39;#ffeead&#39;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 获取</span></span>
<span class="line"><span>var root = document.querySelector(&#39;:root&#39;);</span></span>
<span class="line"><span>var rootStyles = getComputedStyle(root);</span></span>
<span class="line"><span>var mainColor = rootStyles.getPropertyValue(&#39;--main-color&#39;);</span></span>
<span class="line"><span>console.log(mainColor); --&gt; &#39;#ffeead&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 更新</span></span>
<span class="line"><span>root.style.setProperty(&#39;--main-color&#39;, &#39;#88d8b0&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h3 id="_9-3-案例" tabindex="-1">9.3 案例 <a class="header-anchor" href="#_9-3-案例" aria-label="Permalink to &quot;9.3 案例&quot;">​</a></h3><p>一个条形加载条通常由几条线条组成，每条线条对应一个存在不同时延的相同动画，通过时间差运行相同动画，从而产生加载效果。</p><p>在线演示：<a href="https://codepen.io/luofatso/pen/Yzeemjy" target="_blank" rel="noreferrer">条形加载</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 使用前</span></span>
<span class="line"><span>&lt;ul class=&quot;strip-loading&quot;&gt;</span></span>
<span class="line"><span>  &lt;li v-for=&quot;v in 6&quot; :key=&quot;v&quot;&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.strip-loading {</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  width: 200px;</span></span>
<span class="line"><span>  height: 200px;</span></span>
<span class="line"><span>  li {</span></span>
<span class="line"><span>    border-radius: 3px;</span></span>
<span class="line"><span>    width: 6px;</span></span>
<span class="line"><span>    height: 30px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    animation: beat 1s ease-in-out infinite;</span></span>
<span class="line"><span>    &amp; + li {</span></span>
<span class="line"><span>      margin-left: 5px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:nth-child(2) {</span></span>
<span class="line"><span>      animation-delay: 200ms;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:nth-child(3) {</span></span>
<span class="line"><span>      animation-delay: 400ms;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:nth-child(4) {</span></span>
<span class="line"><span>      animation-delay: 600ms;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:nth-child(5) {</span></span>
<span class="line"><span>      animation-delay: 800ms;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:nth-child(6) {</span></span>
<span class="line"><span>      animation-delay: 1s;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat {</span></span>
<span class="line"><span>  0%,</span></span>
<span class="line"><span>  100% {</span></span>
<span class="line"><span>    transform: scaleY(1);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  50% {</span></span>
<span class="line"><span>    transform: scaleY(.5);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 使用后</span></span>
<span class="line"><span>&lt;ul class=&quot;strip-loading&quot;&gt;</span></span>
<span class="line"><span>  &lt;li v-for=&quot;v in 6&quot; :key=&quot;v&quot; :style=&quot;\`--line-index: \${v}\`&quot;&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span>
<span class="line"><span>.strip-loading {</span></span>
<span class="line"><span>  display: flex;</span></span>
<span class="line"><span>  justify-content: center;</span></span>
<span class="line"><span>  align-items: center;</span></span>
<span class="line"><span>  width: 200px;</span></span>
<span class="line"><span>  height: 200px;</span></span>
<span class="line"><span>  li {</span></span>
<span class="line"><span>    --time: calc((var(--line-index) - 1) * 200ms);</span></span>
<span class="line"><span>    border-radius: 3px;</span></span>
<span class="line"><span>    width: 6px;</span></span>
<span class="line"><span>    height: 30px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    animation: beat 1.5s ease-in-out var(--time) infinite;</span></span>
<span class="line"><span>    &amp; + li {</span></span>
<span class="line"><span>      margin-left: 5px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat {</span></span>
<span class="line"><span>  0%,</span></span>
<span class="line"><span>  100% {</span></span>
<span class="line"><span>    transform: scaleY(1);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  50% {</span></span>
<span class="line"><span>    transform: scaleY(.5);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_9-4-相比less、sass" tabindex="-1">9.4 相比less、sass <a class="header-anchor" href="#_9-4-相比less、sass" aria-label="Permalink to &quot;9.4 相比less、sass&quot;">​</a></h3><ul><li>浏览器原生特性，无需经过任何转译可直接运行</li><li>DOM对象一员，极大便利了CSS与JS间的联系</li></ul><h2 id="_10-css预处理器" tabindex="-1">10 CSS预处理器 <a class="header-anchor" href="#_10-css预处理器" aria-label="Permalink to &quot;10 CSS预处理器&quot;">​</a></h2><p>常见：Sass(Scss)、Less、Stylus</p><p>作用、好处：为css添加一些编程特性，再编译生成css文件。</p><p>功能：</p><ul><li>可以使用变量、常量</li><li>允许css代码嵌套</li><li>运算符、循环、判断</li><li>混入Mixin</li><li>继承</li><li>函数等功能</li></ul><h2 id="_11-原子化" tabindex="-1">11 原子化 <a class="header-anchor" href="#_11-原子化" aria-label="Permalink to &quot;11 原子化&quot;">​</a></h2><p>传统方案：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@for $i from 1 through 10 {</span></span>
<span class="line"><span>  .m-#{$i} {</span></span>
<span class="line"><span>    margin: $i / 4 rem;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译结果为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>.m-1 { margin: 0.25 rem; }</span></span>
<span class="line"><span>.m-2 { margin: 0.5 rem; }</span></span>
<span class="line"><span>/* ... */</span></span>
<span class="line"><span>.m-10 { margin: 2.5 rem; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>原子化：原子化 CSS 是一种 CSS 的架构方式，它倾向于小巧且用途单一的 class，并且会以视觉效果进行命名。</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.m-0 {</span></span>
<span class="line"><span>  margin: 0;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.text-red {</span></span>
<span class="line"><span>  color: red;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>特点：</p><ul><li>原子化 CSS 是一种 CSS 的架构方式（解决方案） <ul><li>大家应该都知道相关的一些css方案，比如一直在用的css预处理器，还有css-in-js等</li><li>过去以更加组件化和整体工具类的方向作为css的最佳实践，原子化css算是一个不同的声音。</li></ul></li><li>它倾向于小巧且用途单一的 class <ul><li>每个引用的类里面只有一个单一的功能，很小巧、灵活</li><li>如果一个类里包含两个功能那么他就不是原子css了</li></ul></li><li>并且会以视觉效果进行命名 <ul><li>不知道你有没有在某些时候被去起一个类名被停顿过，特别是在有大量模版的时候，这有的时候还是挺难的</li><li>直接用框架封装好的类，就不用考虑这个问题了，并且根据视觉的类名，你可以很容易的举一反三</li></ul></li></ul><p>优点：</p><ul><li>开发的效率和舒适</li><li>灵活和可维护</li></ul><p>缺点：</p><ul><li>仍存在的上手门槛</li><li>学习、维护成本上升</li></ul><p>目前优秀库推荐：<a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">Tailwind CSS</a>、<a href="https://cn.windicss.org/" target="_blank" rel="noreferrer">Windi CSS</a>、<a href="https://tachyons.io/" target="_blank" rel="noreferrer">Tachyons</a></p><h2 id="_12-拓展" tabindex="-1">12 拓展 <a class="header-anchor" href="#_12-拓展" aria-label="Permalink to &quot;12 拓展&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903667733118983?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">css加载会造成阻塞吗？</a></li><li><a href="https://juejin.cn/post/6844903560879013901" target="_blank" rel="noreferrer">css设置居中的方案总结-超全</a></li><li><a href="https://juejin.cn/post/6844903649605320711?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">CSS性能优化的8个技巧</a></li><li><a href="https://juejin.cn/post/6844903758074216462" target="_blank" rel="noreferrer">不可思议的纯 CSS 滚动进度条效果</a></li><li><a href="https://juejin.cn/post/6844903896473665550" target="_blank" rel="noreferrer">趣味CSS3效果挑战小汇总</a></li><li><a href="https://juejin.cn/post/6844903654756089864" target="_blank" rel="noreferrer">从青铜到王者10个css3伪类使用技巧和运用，了解一哈</a></li><li><a href="https://juejin.cn/post/6844903667175260174" target="_blank" rel="noreferrer">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></li></ul>`,160),p=[e];function r(t,c,o,h,b,d){return s(),n("div",null,p)}const k=a(i,[["render",r]]);export{m as __pageData,k as default};
