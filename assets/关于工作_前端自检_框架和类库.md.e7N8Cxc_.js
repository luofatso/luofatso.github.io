import{_ as a,o as e,c as r,a2 as t}from"./chunks/framework.DkMK-_fX.js";const f=JSON.parse('{"title":"前端自检系列 --- 框架和类库","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"关于工作/前端自检/框架和类库.md","filePath":"关于工作/前端自检/框架和类库.md","lastUpdated":1704719577000}'),i={name:"关于工作/前端自检/框架和类库.md"},l=t('<h1 id="前端自检系列-框架和类库" tabindex="-1">前端自检系列 --- 框架和类库 <a class="header-anchor" href="#前端自检系列-框架和类库" aria-label="Permalink to &quot;前端自检系列 --- 框架和类库&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-typescript">1 TypeScript</a><ul><li><a href="#_1-1-理解泛型、接口等面向对象的相关概念-typescript对面向对象理念的实现">1.1 理解泛型、接口等面向对象的相关概念，TypeScript对面向对象理念的实现</a></li><li><a href="#_1-2-理解使用typescript的好处-掌握typescript基础语法">1.2 理解使用TypeScript的好处，掌握TypeScript基础语法</a></li><li><a href="#_1-3-typescript的规则检测原理">1.3 TypeScript的规则检测原理</a></li><li><a href="#_1-4-可以在react、vue等框架中使用typescript进行开发">1.4 可以在React、Vue等框架中使用TypeScript进行开发</a></li></ul></li><li><a href="#_2-vue">2 Vue</a><ul><li><a href="#_2-1-熟练使用vue的api、生命周期、钩子函数">2.1 熟练使用Vue的API、生命周期、钩子函数</a></li><li><a href="#_2-2-mvvm框架设计理念">2.2 MVVM框架设计理念</a></li><li><a href="#_2-3-vue双向绑定实现原理">2.3 Vue双向绑定实现原理</a></li><li><a href="#_2-4-diff算法的内部实现-vue3相比vue2-它在diff算法上做了哪些优化">2.4 Diff算法的内部实现,vue3相比vue2，它在diff算法上做了哪些优化？</a></li><li><a href="#_2-5-vue2为什么要对数组的常用方法进行重写">2.5 Vue2为什么要对数组的常用方法进行重写？</a></li><li><a href="#_2-6-vue的nexttick是怎么实现的">2.6 Vue的nextTick是怎么实现的？</a></li><li><a href="#_2-7-vue的事件机制">2.7 Vue的事件机制</a></li><li><a href="#_2-8-从template转换成真实dom的实现机制">2.8 从template转换成真实DOM的实现机制</a></li><li><a href="#_2-9-vue中都使用了那些设计模式">2.9 vue中都使用了那些设计模式</a></li><li><a href="#_2-9-vue中-computed-与-watch-的实现原理">2.9 vue中 computed 与 watch 的实现原理</a></li><li><a href="#_2-10-谈谈你对-vuex-的理解">2.10 谈谈你对 vuex 的理解</a></li><li><a href="#_2-11-首页白屏时间过长如何处理">2.11 首页白屏时间过长如何处理</a></li></ul></li><li><a href="#_3-react">3 React</a><ul><li><a href="#_3-1-react和vue-选型和优缺点、核心架构的区别">3.1 React和vue 选型和优缺点、核心架构的区别</a></li><li><a href="#_3-2-react中setstate的执行机制-如何有效的管理状态">3.2 React中setState的执行机制，如何有效的管理状态</a></li><li><a href="#_3-3-react的事件底层实现机制">3.3 React的事件底层实现机制</a></li><li><a href="#_3-4-react的虚拟dom和diff算法的内部实现">3.4 React的虚拟DOM和Diff算法的内部实现</a></li><li><a href="#_3-5-react的fiber工作原理-解决了什么问题">3.5 React的Fiber工作原理，解决了什么问题</a></li><li><a href="#_3-6-react-router和vue-router的底层实现原理、动态加载实现原理">3.6 React Router和Vue Router的底层实现原理、动态加载实现原理</a></li><li><a href="#_3-7-可熟练应用react-api、生命周期等-可应用hoc、render-props、hooks等高阶用法解决问题">3.7 可熟练应用React API、生命周期等，可应用HOC、render props、Hooks等高阶用法解决问题</a></li><li><a href="#_3-8-基于react的特性和原理-可以手动实现一个简单的react">3.8 基于React的特性和原理，可以手动实现一个简单的React</a></li></ul></li><li><a href="#_4-多端开发">4 多端开发</a><ul><li><a href="#_4-1-单页面应用-spa-的原理和优缺点-掌握一种快速开发spa的方案">4.1 单页面应用（SPA）的原理和优缺点，掌握一种快速开发SPA的方案</a></li><li><a href="#_4-2-理解viewport、em、rem的原理和用法-分辨率、px、ppi、dpi、dp的区别和实际应用">4.2 理解Viewport、em、rem的原理和用法，分辨率、px、ppi、dpi、dp的区别和实际应用</a></li><li><a href="#_4-3-移动端页面适配解决方案、不同机型适配方案">4.3 移动端页面适配解决方案、不同机型适配方案</a></li><li><a href="#_4-4-掌握一种javascript移动客户端开发技术-如react-native-可以搭建react-native开发环境-熟练进行开发-可理解react-native的运作原理-不同端适配">4.4 掌握一种JavaScript移动客户端开发技术，如React Native：可以搭建React Native开发环境，熟练进行开发，可理解React Native的运作原理，不同端适配</a></li><li><a href="#_4-5-掌握一种javascript-pc客户端开发技术-如electron-可搭建electron开发环境-熟练进行开发-可理解electron的运作原理">4.5 掌握一种JavaScript PC客户端开发技术，如Electron：可搭建Electron开发环境，熟练进行开发，可理解Electron的运作原理</a></li><li><a href="#_4-6-掌握一种小程序开发框架或原生小程序开发">4.6 掌握一种小程序开发框架或原生小程序开发</a></li><li><a href="#_4-7理解多端框架的内部实现原理-至少了解一个多端框架的使用">4.7理解多端框架的内部实现原理，至少了解一个多端框架的使用</a></li></ul></li><li><a href="#_5-数据流管理">5 数据流管理</a><ul><li><a href="#_5-1-掌握react和vue传统的跨组件通信方案-对比采用数据流管理框架的异同">5.1 掌握React和Vue传统的跨组件通信方案，对比采用数据流管理框架的异同</a></li><li><a href="#_5-2-熟练使用redux管理数据流-并理解其实现原理-中间件实现原理">5.2 熟练使用Redux管理数据流，并理解其实现原理，中间件实现原理</a></li><li><a href="#_5-3-熟练使用mobx管理数据流-并理解其实现原理-相比redux有什么优势">5.3 熟练使用Mobx管理数据流，并理解其实现原理，相比Redux有什么优势</a></li><li><a href="#_5-4-熟练使用vuex管理数据流-并理解其实现原理">5.4 熟练使用Vuex管理数据流，并理解其实现原理</a></li><li><a href="#_5-5-以上数据流方案的异同和优缺点-不情况下的技术选型">5.5 以上数据流方案的异同和优缺点，不情况下的技术选型</a></li></ul></li><li><a href="#_6-实用库">6 实用库</a><ul><li><a href="#_6-1-至少掌握一种ui组件框架-如antd-design-理解其设计理念、底层实现">6.1 至少掌握一种UI组件框架，如antd design，理解其设计理念、底层实现</a></li><li><a href="#_6-2-掌握一种图表绘制框架-如echart-理解其设计理念、底层实现-可以自己实现图表">6.2 掌握一种图表绘制框架，如Echart，理解其设计理念、底层实现，可以自己实现图表</a></li><li><a href="#_6-3-掌握一种gis开发框架-如百度地图api">6.3 掌握一种GIS开发框架，如百度地图API</a></li><li><a href="#_6-4-掌握一种可视化开发框架-如three-js、d3">6.4 掌握一种可视化开发框架，如Three.js、D3</a></li><li><a href="#_6-5-工具函数库-如lodash、underscore、moment等-理解使用的工具类或工具函数的具体实现原理">6.5 工具函数库，如lodash、underscore、moment等，理解使用的工具类或工具函数的具体实现原理</a></li></ul></li><li><a href="#_7-开发和调试">7 开发和调试</a><ul><li><a href="#_7-1-熟练使用各浏览器提供的调试工具">7.1 熟练使用各浏览器提供的调试工具</a></li><li><a href="#_7-2-熟练使用一种代理工具实现请求代理、抓包-如charls">7.2 熟练使用一种代理工具实现请求代理、抓包，如charls</a></li><li><a href="#_7-3-可以使用android、ios模拟器进行调试-并掌握一种真机调试方案">7.3 可以使用Android、IOS模拟器进行调试，并掌握一种真机调试方案</a></li><li><a href="#_7-4-了解vue、react等框架调试工具的使用">7.4 了解Vue、React等框架调试工具的使用</a></li></ul></li></ul></nav><blockquote><p>轮子层出不穷，从原理上理解才是正道</p></blockquote><h2 id="_1-typescript" tabindex="-1">1 TypeScript <a class="header-anchor" href="#_1-typescript" aria-label="Permalink to &quot;1 TypeScript&quot;">​</a></h2><h3 id="_1-1-理解泛型、接口等面向对象的相关概念-typescript对面向对象理念的实现" tabindex="-1">1.1 理解泛型、接口等面向对象的相关概念，TypeScript对面向对象理念的实现 <a class="header-anchor" href="#_1-1-理解泛型、接口等面向对象的相关概念-typescript对面向对象理念的实现" aria-label="Permalink to &quot;1.1 理解泛型、接口等面向对象的相关概念，TypeScript对面向对象理念的实现&quot;">​</a></h3><h3 id="_1-2-理解使用typescript的好处-掌握typescript基础语法" tabindex="-1">1.2 理解使用TypeScript的好处，掌握TypeScript基础语法 <a class="header-anchor" href="#_1-2-理解使用typescript的好处-掌握typescript基础语法" aria-label="Permalink to &quot;1.2 理解使用TypeScript的好处，掌握TypeScript基础语法&quot;">​</a></h3><h3 id="_1-3-typescript的规则检测原理" tabindex="-1">1.3 TypeScript的规则检测原理 <a class="header-anchor" href="#_1-3-typescript的规则检测原理" aria-label="Permalink to &quot;1.3 TypeScript的规则检测原理&quot;">​</a></h3><h3 id="_1-4-可以在react、vue等框架中使用typescript进行开发" tabindex="-1">1.4 可以在React、Vue等框架中使用TypeScript进行开发 <a class="header-anchor" href="#_1-4-可以在react、vue等框架中使用typescript进行开发" aria-label="Permalink to &quot;1.4 可以在React、Vue等框架中使用TypeScript进行开发&quot;">​</a></h3><h2 id="_2-vue" tabindex="-1">2 Vue <a class="header-anchor" href="#_2-vue" aria-label="Permalink to &quot;2 Vue&quot;">​</a></h2><h3 id="_2-1-熟练使用vue的api、生命周期、钩子函数" tabindex="-1">2.1 熟练使用Vue的API、生命周期、钩子函数 <a class="header-anchor" href="#_2-1-熟练使用vue的api、生命周期、钩子函数" aria-label="Permalink to &quot;2.1 熟练使用Vue的API、生命周期、钩子函数&quot;">​</a></h3><h3 id="_2-2-mvvm框架设计理念" tabindex="-1">2.2 MVVM框架设计理念 <a class="header-anchor" href="#_2-2-mvvm框架设计理念" aria-label="Permalink to &quot;2.2 MVVM框架设计理念&quot;">​</a></h3><h3 id="_2-3-vue双向绑定实现原理" tabindex="-1">2.3 Vue双向绑定实现原理 <a class="header-anchor" href="#_2-3-vue双向绑定实现原理" aria-label="Permalink to &quot;2.3 Vue双向绑定实现原理&quot;">​</a></h3><h3 id="_2-4-diff算法的内部实现-vue3相比vue2-它在diff算法上做了哪些优化" tabindex="-1">2.4 Diff算法的内部实现,vue3相比vue2，它在diff算法上做了哪些优化？ <a class="header-anchor" href="#_2-4-diff算法的内部实现-vue3相比vue2-它在diff算法上做了哪些优化" aria-label="Permalink to &quot;2.4 Diff算法的内部实现,vue3相比vue2，它在diff算法上做了哪些优化？&quot;">​</a></h3><h3 id="_2-5-vue2为什么要对数组的常用方法进行重写" tabindex="-1">2.5 Vue2为什么要对数组的常用方法进行重写？ <a class="header-anchor" href="#_2-5-vue2为什么要对数组的常用方法进行重写" aria-label="Permalink to &quot;2.5 Vue2为什么要对数组的常用方法进行重写？&quot;">​</a></h3><h3 id="_2-6-vue的nexttick是怎么实现的" tabindex="-1">2.6 Vue的nextTick是怎么实现的？ <a class="header-anchor" href="#_2-6-vue的nexttick是怎么实现的" aria-label="Permalink to &quot;2.6 Vue的nextTick是怎么实现的？&quot;">​</a></h3><h3 id="_2-7-vue的事件机制" tabindex="-1">2.7 Vue的事件机制 <a class="header-anchor" href="#_2-7-vue的事件机制" aria-label="Permalink to &quot;2.7 Vue的事件机制&quot;">​</a></h3><h3 id="_2-8-从template转换成真实dom的实现机制" tabindex="-1">2.8 从template转换成真实DOM的实现机制 <a class="header-anchor" href="#_2-8-从template转换成真实dom的实现机制" aria-label="Permalink to &quot;2.8 从template转换成真实DOM的实现机制&quot;">​</a></h3><h3 id="_2-9-vue中都使用了那些设计模式" tabindex="-1">2.9 vue中都使用了那些设计模式 <a class="header-anchor" href="#_2-9-vue中都使用了那些设计模式" aria-label="Permalink to &quot;2.9 vue中都使用了那些设计模式&quot;">​</a></h3><h3 id="_2-9-vue中-computed-与-watch-的实现原理" tabindex="-1">2.9 vue中 computed 与 watch 的实现原理 <a class="header-anchor" href="#_2-9-vue中-computed-与-watch-的实现原理" aria-label="Permalink to &quot;2.9 vue中 computed 与 watch 的实现原理&quot;">​</a></h3><h3 id="_2-10-谈谈你对-vuex-的理解" tabindex="-1">2.10 谈谈你对 <code>vuex</code> 的理解 <a class="header-anchor" href="#_2-10-谈谈你对-vuex-的理解" aria-label="Permalink to &quot;2.10 谈谈你对 `vuex` 的理解&quot;">​</a></h3><h3 id="_2-11-首页白屏时间过长如何处理" tabindex="-1">2.11 首页白屏时间过长如何处理 <a class="header-anchor" href="#_2-11-首页白屏时间过长如何处理" aria-label="Permalink to &quot;2.11 首页白屏时间过长如何处理&quot;">​</a></h3><h2 id="_3-react" tabindex="-1">3 React <a class="header-anchor" href="#_3-react" aria-label="Permalink to &quot;3 React&quot;">​</a></h2><h3 id="_3-1-react和vue-选型和优缺点、核心架构的区别" tabindex="-1">3.1 React和vue 选型和优缺点、核心架构的区别 <a class="header-anchor" href="#_3-1-react和vue-选型和优缺点、核心架构的区别" aria-label="Permalink to &quot;3.1 React和vue 选型和优缺点、核心架构的区别&quot;">​</a></h3><h3 id="_3-2-react中setstate的执行机制-如何有效的管理状态" tabindex="-1">3.2 React中setState的执行机制，如何有效的管理状态 <a class="header-anchor" href="#_3-2-react中setstate的执行机制-如何有效的管理状态" aria-label="Permalink to &quot;3.2 React中setState的执行机制，如何有效的管理状态&quot;">​</a></h3><h3 id="_3-3-react的事件底层实现机制" tabindex="-1">3.3 React的事件底层实现机制 <a class="header-anchor" href="#_3-3-react的事件底层实现机制" aria-label="Permalink to &quot;3.3 React的事件底层实现机制&quot;">​</a></h3><h3 id="_3-4-react的虚拟dom和diff算法的内部实现" tabindex="-1">3.4 React的虚拟DOM和Diff算法的内部实现 <a class="header-anchor" href="#_3-4-react的虚拟dom和diff算法的内部实现" aria-label="Permalink to &quot;3.4 React的虚拟DOM和Diff算法的内部实现&quot;">​</a></h3><h3 id="_3-5-react的fiber工作原理-解决了什么问题" tabindex="-1">3.5 React的Fiber工作原理，解决了什么问题 <a class="header-anchor" href="#_3-5-react的fiber工作原理-解决了什么问题" aria-label="Permalink to &quot;3.5 React的Fiber工作原理，解决了什么问题&quot;">​</a></h3><h3 id="_3-6-react-router和vue-router的底层实现原理、动态加载实现原理" tabindex="-1">3.6 React Router和Vue Router的底层实现原理、动态加载实现原理 <a class="header-anchor" href="#_3-6-react-router和vue-router的底层实现原理、动态加载实现原理" aria-label="Permalink to &quot;3.6 React Router和Vue Router的底层实现原理、动态加载实现原理&quot;">​</a></h3><h3 id="_3-7-可熟练应用react-api、生命周期等-可应用hoc、render-props、hooks等高阶用法解决问题" tabindex="-1">3.7 可熟练应用React API、生命周期等，可应用HOC、render props、Hooks等高阶用法解决问题 <a class="header-anchor" href="#_3-7-可熟练应用react-api、生命周期等-可应用hoc、render-props、hooks等高阶用法解决问题" aria-label="Permalink to &quot;3.7 可熟练应用React API、生命周期等，可应用HOC、render props、Hooks等高阶用法解决问题&quot;">​</a></h3><h3 id="_3-8-基于react的特性和原理-可以手动实现一个简单的react" tabindex="-1">3.8 基于React的特性和原理，可以手动实现一个简单的React <a class="header-anchor" href="#_3-8-基于react的特性和原理-可以手动实现一个简单的react" aria-label="Permalink to &quot;3.8 基于React的特性和原理，可以手动实现一个简单的React&quot;">​</a></h3><h2 id="_4-多端开发" tabindex="-1">4 多端开发 <a class="header-anchor" href="#_4-多端开发" aria-label="Permalink to &quot;4 多端开发&quot;">​</a></h2><h3 id="_4-1-单页面应用-spa-的原理和优缺点-掌握一种快速开发spa的方案" tabindex="-1">4.1 单页面应用（SPA）的原理和优缺点，掌握一种快速开发SPA的方案 <a class="header-anchor" href="#_4-1-单页面应用-spa-的原理和优缺点-掌握一种快速开发spa的方案" aria-label="Permalink to &quot;4.1 单页面应用（SPA）的原理和优缺点，掌握一种快速开发SPA的方案&quot;">​</a></h3><h3 id="_4-2-理解viewport、em、rem的原理和用法-分辨率、px、ppi、dpi、dp的区别和实际应用" tabindex="-1">4.2 理解Viewport、em、rem的原理和用法，分辨率、px、ppi、dpi、dp的区别和实际应用 <a class="header-anchor" href="#_4-2-理解viewport、em、rem的原理和用法-分辨率、px、ppi、dpi、dp的区别和实际应用" aria-label="Permalink to &quot;4.2 理解Viewport、em、rem的原理和用法，分辨率、px、ppi、dpi、dp的区别和实际应用&quot;">​</a></h3><h3 id="_4-3-移动端页面适配解决方案、不同机型适配方案" tabindex="-1">4.3 移动端页面适配解决方案、不同机型适配方案 <a class="header-anchor" href="#_4-3-移动端页面适配解决方案、不同机型适配方案" aria-label="Permalink to &quot;4.3 移动端页面适配解决方案、不同机型适配方案&quot;">​</a></h3><h3 id="_4-4-掌握一种javascript移动客户端开发技术-如react-native-可以搭建react-native开发环境-熟练进行开发-可理解react-native的运作原理-不同端适配" tabindex="-1">4.4 掌握一种JavaScript移动客户端开发技术，如React Native：可以搭建React Native开发环境，熟练进行开发，可理解React Native的运作原理，不同端适配 <a class="header-anchor" href="#_4-4-掌握一种javascript移动客户端开发技术-如react-native-可以搭建react-native开发环境-熟练进行开发-可理解react-native的运作原理-不同端适配" aria-label="Permalink to &quot;4.4 掌握一种JavaScript移动客户端开发技术，如React Native：可以搭建React Native开发环境，熟练进行开发，可理解React Native的运作原理，不同端适配&quot;">​</a></h3><h3 id="_4-5-掌握一种javascript-pc客户端开发技术-如electron-可搭建electron开发环境-熟练进行开发-可理解electron的运作原理" tabindex="-1">4.5 掌握一种JavaScript PC客户端开发技术，如Electron：可搭建Electron开发环境，熟练进行开发，可理解Electron的运作原理 <a class="header-anchor" href="#_4-5-掌握一种javascript-pc客户端开发技术-如electron-可搭建electron开发环境-熟练进行开发-可理解electron的运作原理" aria-label="Permalink to &quot;4.5 掌握一种JavaScript PC客户端开发技术，如Electron：可搭建Electron开发环境，熟练进行开发，可理解Electron的运作原理&quot;">​</a></h3><h3 id="_4-6-掌握一种小程序开发框架或原生小程序开发" tabindex="-1">4.6 掌握一种小程序开发框架或原生小程序开发 <a class="header-anchor" href="#_4-6-掌握一种小程序开发框架或原生小程序开发" aria-label="Permalink to &quot;4.6 掌握一种小程序开发框架或原生小程序开发&quot;">​</a></h3><h3 id="_4-7理解多端框架的内部实现原理-至少了解一个多端框架的使用" tabindex="-1">4.7理解多端框架的内部实现原理，至少了解一个多端框架的使用 <a class="header-anchor" href="#_4-7理解多端框架的内部实现原理-至少了解一个多端框架的使用" aria-label="Permalink to &quot;4.7理解多端框架的内部实现原理，至少了解一个多端框架的使用&quot;">​</a></h3><h2 id="_5-数据流管理" tabindex="-1">5 数据流管理 <a class="header-anchor" href="#_5-数据流管理" aria-label="Permalink to &quot;5 数据流管理&quot;">​</a></h2><h3 id="_5-1-掌握react和vue传统的跨组件通信方案-对比采用数据流管理框架的异同" tabindex="-1">5.1 掌握React和Vue传统的跨组件通信方案，对比采用数据流管理框架的异同 <a class="header-anchor" href="#_5-1-掌握react和vue传统的跨组件通信方案-对比采用数据流管理框架的异同" aria-label="Permalink to &quot;5.1 掌握React和Vue传统的跨组件通信方案，对比采用数据流管理框架的异同&quot;">​</a></h3><h3 id="_5-2-熟练使用redux管理数据流-并理解其实现原理-中间件实现原理" tabindex="-1">5.2 熟练使用Redux管理数据流，并理解其实现原理，中间件实现原理 <a class="header-anchor" href="#_5-2-熟练使用redux管理数据流-并理解其实现原理-中间件实现原理" aria-label="Permalink to &quot;5.2 熟练使用Redux管理数据流，并理解其实现原理，中间件实现原理&quot;">​</a></h3><h3 id="_5-3-熟练使用mobx管理数据流-并理解其实现原理-相比redux有什么优势" tabindex="-1">5.3 熟练使用Mobx管理数据流，并理解其实现原理，相比Redux有什么优势 <a class="header-anchor" href="#_5-3-熟练使用mobx管理数据流-并理解其实现原理-相比redux有什么优势" aria-label="Permalink to &quot;5.3 熟练使用Mobx管理数据流，并理解其实现原理，相比Redux有什么优势&quot;">​</a></h3><h3 id="_5-4-熟练使用vuex管理数据流-并理解其实现原理" tabindex="-1">5.4 熟练使用Vuex管理数据流，并理解其实现原理 <a class="header-anchor" href="#_5-4-熟练使用vuex管理数据流-并理解其实现原理" aria-label="Permalink to &quot;5.4 熟练使用Vuex管理数据流，并理解其实现原理&quot;">​</a></h3><h3 id="_5-5-以上数据流方案的异同和优缺点-不情况下的技术选型" tabindex="-1">5.5 以上数据流方案的异同和优缺点，不情况下的技术选型 <a class="header-anchor" href="#_5-5-以上数据流方案的异同和优缺点-不情况下的技术选型" aria-label="Permalink to &quot;5.5 以上数据流方案的异同和优缺点，不情况下的技术选型&quot;">​</a></h3><h2 id="_6-实用库" tabindex="-1">6 实用库 <a class="header-anchor" href="#_6-实用库" aria-label="Permalink to &quot;6 实用库&quot;">​</a></h2><h3 id="_6-1-至少掌握一种ui组件框架-如antd-design-理解其设计理念、底层实现" tabindex="-1">6.1 至少掌握一种UI组件框架，如antd design，理解其设计理念、底层实现 <a class="header-anchor" href="#_6-1-至少掌握一种ui组件框架-如antd-design-理解其设计理念、底层实现" aria-label="Permalink to &quot;6.1 至少掌握一种UI组件框架，如antd design，理解其设计理念、底层实现&quot;">​</a></h3><h3 id="_6-2-掌握一种图表绘制框架-如echart-理解其设计理念、底层实现-可以自己实现图表" tabindex="-1">6.2 掌握一种图表绘制框架，如Echart，理解其设计理念、底层实现，可以自己实现图表 <a class="header-anchor" href="#_6-2-掌握一种图表绘制框架-如echart-理解其设计理念、底层实现-可以自己实现图表" aria-label="Permalink to &quot;6.2 掌握一种图表绘制框架，如Echart，理解其设计理念、底层实现，可以自己实现图表&quot;">​</a></h3><h3 id="_6-3-掌握一种gis开发框架-如百度地图api" tabindex="-1">6.3 掌握一种GIS开发框架，如百度地图API <a class="header-anchor" href="#_6-3-掌握一种gis开发框架-如百度地图api" aria-label="Permalink to &quot;6.3 掌握一种GIS开发框架，如百度地图API&quot;">​</a></h3><h3 id="_6-4-掌握一种可视化开发框架-如three-js、d3" tabindex="-1">6.4 掌握一种可视化开发框架，如Three.js、D3 <a class="header-anchor" href="#_6-4-掌握一种可视化开发框架-如three-js、d3" aria-label="Permalink to &quot;6.4 掌握一种可视化开发框架，如Three.js、D3&quot;">​</a></h3><h3 id="_6-5-工具函数库-如lodash、underscore、moment等-理解使用的工具类或工具函数的具体实现原理" tabindex="-1">6.5 工具函数库，如lodash、underscore、moment等，理解使用的工具类或工具函数的具体实现原理 <a class="header-anchor" href="#_6-5-工具函数库-如lodash、underscore、moment等-理解使用的工具类或工具函数的具体实现原理" aria-label="Permalink to &quot;6.5 工具函数库，如lodash、underscore、moment等，理解使用的工具类或工具函数的具体实现原理&quot;">​</a></h3><h2 id="_7-开发和调试" tabindex="-1">7 开发和调试 <a class="header-anchor" href="#_7-开发和调试" aria-label="Permalink to &quot;7 开发和调试&quot;">​</a></h2><h3 id="_7-1-熟练使用各浏览器提供的调试工具" tabindex="-1">7.1 熟练使用各浏览器提供的调试工具 <a class="header-anchor" href="#_7-1-熟练使用各浏览器提供的调试工具" aria-label="Permalink to &quot;7.1 熟练使用各浏览器提供的调试工具&quot;">​</a></h3><h3 id="_7-2-熟练使用一种代理工具实现请求代理、抓包-如charls" tabindex="-1">7.2 熟练使用一种代理工具实现请求代理、抓包，如charls <a class="header-anchor" href="#_7-2-熟练使用一种代理工具实现请求代理、抓包-如charls" aria-label="Permalink to &quot;7.2 熟练使用一种代理工具实现请求代理、抓包，如charls&quot;">​</a></h3><h3 id="_7-3-可以使用android、ios模拟器进行调试-并掌握一种真机调试方案" tabindex="-1">7.3 可以使用Android、IOS模拟器进行调试，并掌握一种真机调试方案 <a class="header-anchor" href="#_7-3-可以使用android、ios模拟器进行调试-并掌握一种真机调试方案" aria-label="Permalink to &quot;7.3 可以使用Android、IOS模拟器进行调试，并掌握一种真机调试方案&quot;">​</a></h3><h3 id="_7-4-了解vue、react等框架调试工具的使用" tabindex="-1">7.4 了解Vue、React等框架调试工具的使用 <a class="header-anchor" href="#_7-4-了解vue、react等框架调试工具的使用" aria-label="Permalink to &quot;7.4 了解Vue、React等框架调试工具的使用&quot;">​</a></h3>',55),h=[l];function o(c,u,d,n,s,_){return e(),r("div",null,h)}const b=a(i,[["render",o]]);export{f as __pageData,b as default};
