import{_ as a,o as e,c as i,a2 as l}from"./chunks/framework.DkMK-_fX.js";const p=JSON.parse('{"title":"前端自检系列 --- 前端工程","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"大前端/前端自检/前端工程.md","filePath":"大前端/前端自检/前端工程.md","lastUpdated":1727401527000}'),n={name:"大前端/前端自检/前端工程.md"},r=l('<h1 id="前端自检系列-前端工程" tabindex="-1">前端自检系列 --- 前端工程 <a class="header-anchor" href="#前端自检系列-前端工程" aria-label="Permalink to &quot;前端自检系列 --- 前端工程&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-项目构建">1 项目构建</a><ul><li><a href="#_1-1-理解npm、yarn依赖包管理的原理-两者的区别">1.1 理解npm、yarn依赖包管理的原理，两者的区别</a></li><li><a href="#_1-2-可以使用npm运行自定义脚本">1.2 可以使用npm运行自定义脚本</a></li><li><a href="#_1-3-理解babel、eslint、webpack等工具在项目中承担的作用">1.3 理解Babel、ESLint、webpack等工具在项目中承担的作用</a></li><li><a href="#_1-4-eslint规则检测原理-常用的eslint配置">1.4 ESLint规则检测原理，常用的ESLint配置</a></li><li><a href="#_1-5-babel的核心原理-可以自己编写一个babel插件">1.5 Babel的核心原理，可以自己编写一个Babel插件</a></li><li><a href="#_1-6-可以配置一种前端代码兼容方案-如polyfill">1.6 可以配置一种前端代码兼容方案，如Polyfill</a></li><li><a href="#_1-7-webpack的编译原理、构建流程、热更新原理-chunk、bundle和module的区别和应用">1.7 Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用</a></li><li><a href="#_1-8-可熟练配置已有的loaders和plugins解决问题-可以自己编写loaders和plugins">1.8 可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins</a></li></ul></li><li><a href="#_2-nginx">2 nginx</a><ul><li><a href="#_2-1-正向代理与反向代理的特点和实例">2.1 正向代理与反向代理的特点和实例</a></li><li><a href="#_2-2-可手动搭建一个简单的nginx服务器、">2.2 可手动搭建一个简单的nginx服务器、</a></li><li><a href="#_2-3-熟练应用常用的nginx内置变量-掌握常用的匹配规则写法">2.3 熟练应用常用的nginx内置变量，掌握常用的匹配规则写法</a></li><li><a href="#_2-4-可以用nginx实现请求过滤、配置gzip、负载均衡等-并能解释其内部原理">2.4 可以用nginx实现请求过滤、配置gzip、负载均衡等，并能解释其内部原理</a></li></ul></li><li><a href="#_3-开发提速">3 开发提速</a><ul><li><a href="#_3-1-熟练掌握一种接口管理、接口mock工具的使用-如yapi">3.1 熟练掌握一种接口管理、接口mock工具的使用，如yapi</a></li><li><a href="#_3-2-掌握一种高效的日志埋点方案-可快速使用日志查询工具定位线上问题">3.2 掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题</a></li><li><a href="#_3-3-理解tdd与bdd模式-至少会使用一种前端单元测试框架">3.3 理解TDD与BDD模式，至少会使用一种前端单元测试框架</a></li></ul></li><li><a href="#_4-版本控制">4 版本控制</a><ul><li><a href="#_4-1-理解git的核心原理、工作流程、和svn的区别">4.1 理解Git的核心原理、工作流程、和SVN的区别</a></li><li><a href="#_4-2-熟练使用常规的git命令、git-rebase、git-stash等进阶命令">4.2 熟练使用常规的Git命令、git rebase、git stash等进阶命令</a></li><li><a href="#_4-3-可以快速解决线上分支回滚、线上分支错误合并等复杂问题">4.3 可以快速解决线上分支回滚、线上分支错误合并等复杂问题</a></li></ul></li><li><a href="#_5-持续集成">5 持续集成</a><ul><li><a href="#_5-1-理解ci-cd技术的意义-至少熟练掌握一种ci-cd工具的使用-如jenkins">5.1 理解CI/CD技术的意义，至少熟练掌握一种CI/CD工具的使用，如Jenkins</a></li><li><a href="#_5-2-可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程-包括web应用、移动客户端应用、pc客户端应用、小程序、h5等等">5.2 可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括Web应用、移动客户端应用、PC客户端应用、小程序、H5等等）</a></li></ul></li></ul></nav><blockquote><p>前端工程化：以工程化方法和工具提高开发生产效率、降低维护难度</p></blockquote><h2 id="_1-项目构建" tabindex="-1">1 项目构建 <a class="header-anchor" href="#_1-项目构建" aria-label="Permalink to &quot;1 项目构建&quot;">​</a></h2><h3 id="_1-1-理解npm、yarn依赖包管理的原理-两者的区别" tabindex="-1">1.1 理解npm、yarn依赖包管理的原理，两者的区别 <a class="header-anchor" href="#_1-1-理解npm、yarn依赖包管理的原理-两者的区别" aria-label="Permalink to &quot;1.1 理解npm、yarn依赖包管理的原理，两者的区别&quot;">​</a></h3><h3 id="_1-2-可以使用npm运行自定义脚本" tabindex="-1">1.2 可以使用npm运行自定义脚本 <a class="header-anchor" href="#_1-2-可以使用npm运行自定义脚本" aria-label="Permalink to &quot;1.2 可以使用npm运行自定义脚本&quot;">​</a></h3><h3 id="_1-3-理解babel、eslint、webpack等工具在项目中承担的作用" tabindex="-1">1.3 理解Babel、ESLint、webpack等工具在项目中承担的作用 <a class="header-anchor" href="#_1-3-理解babel、eslint、webpack等工具在项目中承担的作用" aria-label="Permalink to &quot;1.3 理解Babel、ESLint、webpack等工具在项目中承担的作用&quot;">​</a></h3><h3 id="_1-4-eslint规则检测原理-常用的eslint配置" tabindex="-1">1.4 ESLint规则检测原理，常用的ESLint配置 <a class="header-anchor" href="#_1-4-eslint规则检测原理-常用的eslint配置" aria-label="Permalink to &quot;1.4 ESLint规则检测原理，常用的ESLint配置&quot;">​</a></h3><h3 id="_1-5-babel的核心原理-可以自己编写一个babel插件" tabindex="-1">1.5 Babel的核心原理，可以自己编写一个Babel插件 <a class="header-anchor" href="#_1-5-babel的核心原理-可以自己编写一个babel插件" aria-label="Permalink to &quot;1.5 Babel的核心原理，可以自己编写一个Babel插件&quot;">​</a></h3><h3 id="_1-6-可以配置一种前端代码兼容方案-如polyfill" tabindex="-1">1.6 可以配置一种前端代码兼容方案，如Polyfill <a class="header-anchor" href="#_1-6-可以配置一种前端代码兼容方案-如polyfill" aria-label="Permalink to &quot;1.6 可以配置一种前端代码兼容方案，如Polyfill&quot;">​</a></h3><h3 id="_1-7-webpack的编译原理、构建流程、热更新原理-chunk、bundle和module的区别和应用" tabindex="-1">1.7 Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用 <a class="header-anchor" href="#_1-7-webpack的编译原理、构建流程、热更新原理-chunk、bundle和module的区别和应用" aria-label="Permalink to &quot;1.7 Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用&quot;">​</a></h3><h3 id="_1-8-可熟练配置已有的loaders和plugins解决问题-可以自己编写loaders和plugins" tabindex="-1">1.8 可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins <a class="header-anchor" href="#_1-8-可熟练配置已有的loaders和plugins解决问题-可以自己编写loaders和plugins" aria-label="Permalink to &quot;1.8 可熟练配置已有的loaders和plugins解决问题，可以自己编写loaders和plugins&quot;">​</a></h3><h2 id="_2-nginx" tabindex="-1">2 nginx <a class="header-anchor" href="#_2-nginx" aria-label="Permalink to &quot;2 nginx&quot;">​</a></h2><h3 id="_2-1-正向代理与反向代理的特点和实例" tabindex="-1">2.1 正向代理与反向代理的特点和实例 <a class="header-anchor" href="#_2-1-正向代理与反向代理的特点和实例" aria-label="Permalink to &quot;2.1 正向代理与反向代理的特点和实例&quot;">​</a></h3><h3 id="_2-2-可手动搭建一个简单的nginx服务器、" tabindex="-1">2.2 可手动搭建一个简单的nginx服务器、 <a class="header-anchor" href="#_2-2-可手动搭建一个简单的nginx服务器、" aria-label="Permalink to &quot;2.2 可手动搭建一个简单的nginx服务器、&quot;">​</a></h3><h3 id="_2-3-熟练应用常用的nginx内置变量-掌握常用的匹配规则写法" tabindex="-1">2.3 熟练应用常用的nginx内置变量，掌握常用的匹配规则写法 <a class="header-anchor" href="#_2-3-熟练应用常用的nginx内置变量-掌握常用的匹配规则写法" aria-label="Permalink to &quot;2.3 熟练应用常用的nginx内置变量，掌握常用的匹配规则写法&quot;">​</a></h3><h3 id="_2-4-可以用nginx实现请求过滤、配置gzip、负载均衡等-并能解释其内部原理" tabindex="-1">2.4 可以用nginx实现请求过滤、配置gzip、负载均衡等，并能解释其内部原理 <a class="header-anchor" href="#_2-4-可以用nginx实现请求过滤、配置gzip、负载均衡等-并能解释其内部原理" aria-label="Permalink to &quot;2.4 可以用nginx实现请求过滤、配置gzip、负载均衡等，并能解释其内部原理&quot;">​</a></h3><h2 id="_3-开发提速" tabindex="-1">3 开发提速 <a class="header-anchor" href="#_3-开发提速" aria-label="Permalink to &quot;3 开发提速&quot;">​</a></h2><h3 id="_3-1-熟练掌握一种接口管理、接口mock工具的使用-如yapi" tabindex="-1">3.1 熟练掌握一种接口管理、接口mock工具的使用，如yapi <a class="header-anchor" href="#_3-1-熟练掌握一种接口管理、接口mock工具的使用-如yapi" aria-label="Permalink to &quot;3.1 熟练掌握一种接口管理、接口mock工具的使用，如yapi&quot;">​</a></h3><h3 id="_3-2-掌握一种高效的日志埋点方案-可快速使用日志查询工具定位线上问题" tabindex="-1">3.2 掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题 <a class="header-anchor" href="#_3-2-掌握一种高效的日志埋点方案-可快速使用日志查询工具定位线上问题" aria-label="Permalink to &quot;3.2 掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题&quot;">​</a></h3><h3 id="_3-3-理解tdd与bdd模式-至少会使用一种前端单元测试框架" tabindex="-1">3.3 理解TDD与BDD模式，至少会使用一种前端单元测试框架 <a class="header-anchor" href="#_3-3-理解tdd与bdd模式-至少会使用一种前端单元测试框架" aria-label="Permalink to &quot;3.3 理解TDD与BDD模式，至少会使用一种前端单元测试框架&quot;">​</a></h3><h2 id="_4-版本控制" tabindex="-1">4 版本控制 <a class="header-anchor" href="#_4-版本控制" aria-label="Permalink to &quot;4 版本控制&quot;">​</a></h2><h3 id="_4-1-理解git的核心原理、工作流程、和svn的区别" tabindex="-1">4.1 理解Git的核心原理、工作流程、和SVN的区别 <a class="header-anchor" href="#_4-1-理解git的核心原理、工作流程、和svn的区别" aria-label="Permalink to &quot;4.1 理解Git的核心原理、工作流程、和SVN的区别&quot;">​</a></h3><h3 id="_4-2-熟练使用常规的git命令、git-rebase、git-stash等进阶命令" tabindex="-1">4.2 熟练使用常规的Git命令、git rebase、git stash等进阶命令 <a class="header-anchor" href="#_4-2-熟练使用常规的git命令、git-rebase、git-stash等进阶命令" aria-label="Permalink to &quot;4.2 熟练使用常规的Git命令、git rebase、git stash等进阶命令&quot;">​</a></h3><h3 id="_4-3-可以快速解决线上分支回滚、线上分支错误合并等复杂问题" tabindex="-1">4.3 可以快速解决线上分支回滚、线上分支错误合并等复杂问题 <a class="header-anchor" href="#_4-3-可以快速解决线上分支回滚、线上分支错误合并等复杂问题" aria-label="Permalink to &quot;4.3 可以快速解决线上分支回滚、线上分支错误合并等复杂问题&quot;">​</a></h3><h2 id="_5-持续集成" tabindex="-1">5 持续集成 <a class="header-anchor" href="#_5-持续集成" aria-label="Permalink to &quot;5 持续集成&quot;">​</a></h2><h3 id="_5-1-理解ci-cd技术的意义-至少熟练掌握一种ci-cd工具的使用-如jenkins" tabindex="-1">5.1 理解CI/CD技术的意义，至少熟练掌握一种CI/CD工具的使用，如Jenkins <a class="header-anchor" href="#_5-1-理解ci-cd技术的意义-至少熟练掌握一种ci-cd工具的使用-如jenkins" aria-label="Permalink to &quot;5.1 理解CI/CD技术的意义，至少熟练掌握一种CI/CD工具的使用，如Jenkins&quot;">​</a></h3><h3 id="_5-2-可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程-包括web应用、移动客户端应用、pc客户端应用、小程序、h5等等" tabindex="-1">5.2 可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括Web应用、移动客户端应用、PC客户端应用、小程序、H5等等） <a class="header-anchor" href="#_5-2-可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程-包括web应用、移动客户端应用、pc客户端应用、小程序、h5等等" aria-label="Permalink to &quot;5.2 可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括Web应用、移动客户端应用、PC客户端应用、小程序、H5等等）&quot;">​</a></h3>',28),t=[r];function h(o,s,d,b,c,_){return e(),i("div",null,t)}const f=a(n,[["render",h]]);export{p as __pageData,f as default};
